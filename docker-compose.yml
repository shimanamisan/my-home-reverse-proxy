volumes:
  npm_data:
    # アプリケーションデータ（設定、データベース等）を保存
    name: nginx-proxy-manager-data
  npm_ssl_certificates:
    # SSL証明書とキーファイルを保存
    name: nginx-proxy-manager-ssl
    
# 外部ネットワークの定義
networks:
  nginx-proxy-manager-network:
    # 既存の外部ネットワークを使用
    external: true

# サービス定義
services:

  portainer:
    image: portainer/portainer-ce:lts                  # Long Term Support版
    container_name: portainer-ce-prod                  # コンテナ名
    security_opt:
      - no-new-privileges:true                         # 新しい権限の取得を禁止
    volumes:
      - './portainer-data:/data'                       # データをホストにマウント
      - '/var/run/docker.sock:/var/run/docker.sock:ro' # 読み取り専用でマウント
    environment:
      - TZ=Asia/Tokyo
    expose:
      - "9000"                                          # 内部ポートのみ公開（Nginx経由でのアクセス想定）
    networks:
      - nginx-proxy-manager-network    

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:2.12.6'        # 公式のNginx Proxy Managerイメージ
    container_name: nginx-proxy-manager-prod        # コンテナ名
    ports:
      - '80:80'                                     # 公開HTTPポート - 外部からのHTTPリクエストを受信
      - '443:443'                                   # 公開HTTPSポート - 外部からのHTTPSリクエストを受信
      - '${ADMIN_PORT:-81}:81'                      # 管理Webポート - 管理画面へのアクセス用
    env_file:
      - .env                                        # 環境変数ファイルの読み込み
    environment:
      - DISABLE_IPV6=true                           # IPv6を無効化（IPv4のみ使用）
      - TZ=Asia/Tokyo
    volumes:
      - ./nginx-proxy-manager-data:/data            # アプリケーションデータをホストにマウント
      - ./nginx-proxy-manager-ssl:/etc/letsencrypt  # SSL証明書をホストにマウント
    networks:
      - nginx-proxy-manager-network                 # 指定されたネットワークに接続
    healthcheck:
      test: ["CMD", "/usr/bin/check-health"]
      interval: 10s
      timeout: 3s